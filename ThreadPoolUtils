package com.fight2048.jdefault.admin.common.security.session;


import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.*;
import java.util.concurrent.atomic.AtomicReference;
import java.util.function.BiConsumer;
import java.util.function.Consumer;
import java.util.stream.Collectors;

/**
 * @author shenggongjie
 * @date 2021/12/29 9:54
 */
public class ThreadPoolUtils {
    /**
     * 创建线程池 最大30条线程
     *
     * @return
     */
    public static ThreadPoolExecutor createThreadPool() {
        return new ThreadPoolExecutor(5
                , 25
                , 60
                , TimeUnit.SECONDS
                , new ArrayBlockingQueue<>(15)
                , Thread::new
                //使用spring提供的调用等待机制，最大等待10秒后还无法获取新线程将抛出异常
                , new ThreadPoolExecutor.AbortPolicy()
        );
    }

    /**
     * 执行多线程
     * @param runnable 任务 无参数
     */
    public static void execute(Runnable runnable){
        ThreadPoolExecutor threadPool = createThreadPool();
        threadPool.execute(runnable);
        threadPool.shutdown();
    }

    /**
     * 执行多线程
     * @param executeMethod 需要执行的方法 单个参数
     * @param arg1 参数1
     */
    public static <D> void execute(Consumer<D> executeMethod, D arg1){
        ThreadPoolExecutor threadPool = createThreadPool();
        threadPool.execute(() -> executeMethod.accept(arg1));
        threadPool.shutdown();
    }

    /**
     * 执行多线程
     * @param executeMethod 需要执行的方法 可传入两个参数
     * @param arg1 参数1
     * @param arg2 参数2
     */
    public static <D,O> void execute(BiConsumer<D,O> executeMethod, D arg1, O arg2){
        ThreadPoolExecutor threadPool = createThreadPool();
        threadPool.execute(() -> executeMethod.accept(arg1,arg2));
        threadPool.shutdown();
    }

    /**
     * 分页执行当前list
     * @param list 分页前数据
     * @param executeMethod 需要执行的方法
     *                      示例:
     *                      单个参数(只包含这个list) ThreadPoolUtils.execute(list, object::methodName)
     *                      多个参数(ThreadPoolUtils.execute(list, (list) -> object.method(list, a, b, c)) a,b,c等均自己传入)
     *                      object自己时用this，多个参数时可以省略。
     */
    public static <D> void execute(List<D> list, Consumer<List<D>> executeMethod){
        //创建最大30条的线程池(调用等待策略 10秒)
        ThreadPoolExecutor threadPool = createThreadPool();
        //得到结果和失败消息
        AtomicReference<Boolean> fail = new AtomicReference<>(false);
        AtomicReference<String> failMessage = new AtomicReference<>("");
        //分页执行，每一个线程执行100条数据
        int size = 100;
        int pageSize = list.size() / size + 1;
        CountDownLatch countDownLatch = new CountDownLatch(pageSize);
        for (int j = 0; j < pageSize; j++) {
            List<D> pageList = list.stream()
                    .skip((long) j * size)
                    .limit(size)
                    .collect(Collectors.toList());
            //执行线程
            threadPool.execute(() -> {
                try {
                    executeMethod.accept(pageList);
                } catch (Exception e) {
                    //快速失败(设置失败状态和失败原因)
                    fail.set(true);
                    failMessage.set(e.getMessage());
                    for (int k = 0; k < pageSize; k++) {
                        countDownLatch.countDown();
                    }
                }finally {
                    countDownLatch.countDown();
                }
            });
        }
        //执行所有线程后关闭线程池(包含溢出等待中的线程)
        threadPool.shutdown();
        //等待所有数据收集完毕再执行后面操作
        countDownLatchAwait(countDownLatch);
        //是否所有数据都合法
        if (fail.get()){
            throw new RuntimeException(failMessage.get());
        }
    }

    /**
     * 等待计时器
     * @param countDownLatch
     */
    private static void countDownLatchAwait(CountDownLatch countDownLatch){
        try {
            countDownLatch.await();
        } catch (InterruptedException e) {
            throw new RuntimeException("关闭计时器失败");
        }
    }
}

import java.util.List;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicReference;
import java.util.function.BiConsumer;
import java.util.function.Consumer;
import java.util.stream.Collectors;

/**
 * @author shenggongjie
 * @date 2021/12/29 9:54
 */
public class ThreadPoolUtils {
    /**
     * 创建线程池 最大30条线程
     *
     * @return
     */
    private static ThreadPoolExecutor createThreadPool() {
        return new ThreadPoolExecutor(5
                , 25
                , 60
                , TimeUnit.SECONDS
                , new ArrayBlockingQueue<>(500)
                , Thread::new
                //中断机制
                , new ThreadPoolExecutor.AbortPolicy()
        );
    }

    /**
     * 创建线程池 最大30条线程
     *
     * @return
     */
    private static ThreadPoolExecutor createSingleThreadPool() {
        return new ThreadPoolExecutor(1
                , 1
                , 60
                , TimeUnit.SECONDS
                , new ArrayBlockingQueue<>(1)
                , Thread::new
                //中断机制
                , new ThreadPoolExecutor.AbortPolicy()
        );
    }

    /**
     * 执行多线程 (this::method)
     *
     * @param runnable 任务 无参数
     */
    public static void execute(Runnable runnable) {
        ThreadPoolExecutor threadPool = createSingleThreadPool();
        threadPool.execute(runnable);
        threadPool.shutdown();
    }

    /**
     * 执行多线程 (this::method, arg1)
     *
     * @param executeMethod 需要执行的方法 单个参数
     * @param arg1          参数1
     */
    public static <D> void execute(Consumer<D> executeMethod, D arg1) {
        ThreadPoolExecutor threadPool = createSingleThreadPool();
        threadPool.execute(() -> executeMethod.accept(arg1));
        threadPool.shutdown();
    }

    /**
     * 执行多线程 (this::method, arg1, arg2)
     *
     * @param executeMethod 需要执行的方法 可传入两个参数
     * @param arg1          参数1
     * @param arg2          参数2
     */
    public static <D, O> void execute(BiConsumer<D, O> executeMethod, D arg1, O arg2) {
        ThreadPoolExecutor threadPool = createSingleThreadPool();
        threadPool.execute(() -> executeMethod.accept(arg1, arg2));
        threadPool.shutdown();
    }

    /**
     * 使用多线程分页执行当前传入的list对象，将list根据传入的size切割，分批使用多个线程执行代码
     * 写法：
     * 仅包含list参数的写法(totalList, this::method)
     * 多个参数的写法(100, totalList, (pageList) -> this.method(pageList, a, b ,c))a,b,c均使用自己的代码
     *
     * @param size          每页执行条数，必须大于0
     * @param totalList          分页前数据
     * @param executeMethod 需要执行的方法 参数是当前list中的一页
     */
    public static <D> void execute(int size, List<D> totalList, Consumer<List<D>> executeMethod) {
        //创建最大30条的线程池(调用等待策略 10秒)
        ThreadPoolExecutor threadPool = createThreadPool();
        //得到结果和失败消息
        AtomicReference<Boolean> fail = new AtomicReference<>(false);
        AtomicReference<String> failMessage = new AtomicReference<>("");
        //分页执行，每一个线程执行size条数据
        int pageSize = (int) Math.ceil((double) totalList.size() / (double) size);
        CountDownLatch countDownLatch = new CountDownLatch(pageSize);
        for (int j = 0; j < pageSize; j++) {
            List<D> pageList = totalList.stream()
                    .skip((long) j * size)
                    .limit(size)
                    .collect(Collectors.toList());
            //执行线程
            threadPool.execute(() -> {
                try {
                    executeMethod.accept(pageList);
                } catch (Exception e) {
                    //快速失败(设置失败状态和失败原因)
                    fail.set(true);
                    failMessage.set(e.getMessage());
                    for (int k = 0; k < pageSize; k++) {
                        countDownLatch.countDown();
                    }
                } finally {
                    countDownLatch.countDown();
                }
            });
        }
        //执行所有线程后关闭线程池(包含溢出等待中的线程)
        threadPool.shutdown();
        //等待所有数据收集完毕再执行后面操作
        countDownLatchAwait(countDownLatch);
        //是否所有数据都合法
        if (fail.get()) {
            throw new RuntimeException(failMessage.get());
        }
    }

    /**
     * 等待计时器
     * @param countDownLatch
     */
    private static void countDownLatchAwait(CountDownLatch countDownLatch){
        try {
            countDownLatch.await();
        } catch (InterruptedException e) {
            throw new RuntimeException("计时器关闭失败");
        }
    }
}

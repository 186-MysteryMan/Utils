package com.pooul.haoyufu.boot.interceptor;

import lombok.extern.slf4j.Slf4j;
import org.apache.ibatis.executor.Executor;
import org.apache.ibatis.mapping.BoundSql;
import org.apache.ibatis.mapping.MappedStatement;
import org.apache.ibatis.mapping.ParameterMapping;
import org.apache.ibatis.plugin.Interceptor;
import org.apache.ibatis.plugin.Intercepts;
import org.apache.ibatis.plugin.Invocation;
import org.apache.ibatis.plugin.Signature;
import org.apache.ibatis.reflection.MetaObject;
import org.apache.ibatis.session.ResultHandler;
import org.apache.ibatis.session.RowBounds;
import org.apache.ibatis.type.TypeHandlerRegistry;
import org.springframework.stereotype.Component;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Objects;

/**
 * @author GongJie Sheng
 * @date 2021/12/26 13:48
 */
@Component
@Intercepts({@Signature(
                    method = "query",
                    type = Executor.class,
                    args = {MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class}),
            @Signature(
                    method = "update",
                    type = Executor.class,
                    args = {MappedStatement.class, Object.class})})
@Slf4j
public class MybatisLogInterceptor implements Interceptor {

    @Override
    public Object intercept(Invocation invocation) throws Throwable {
        Object re = invocation.proceed();
        String sql = "";
        try {
            MappedStatement mappedStatement = (MappedStatement) invocation.getArgs()[0];
            Object parameter = null;
            if (invocation.getArgs().length > 1) {
                parameter = invocation.getArgs()[1];
            }
            BoundSql boundSql = mappedStatement.getBoundSql(parameter);
            Object parameterObject = boundSql.getParameterObject();
            sql = boundSql.getSql()
                    .replaceAll("\n", " ")
                    .replaceAll("=", " = ");
            MetaObject metaObject = mappedStatement.getConfiguration().newMetaObject(parameterObject);
            List<ParameterMapping> parameterMappings = boundSql.getParameterMappings();
            for (ParameterMapping parameterMapping : parameterMappings) {
                TypeHandlerRegistry typeHandlerRegistry = mappedStatement.getConfiguration().getTypeHandlerRegistry();
                if (Objects.isNull(parameterObject)) {
                    sql = sql.replaceFirst("\\?", "null");
                }else {
                    if (typeHandlerRegistry.hasTypeHandler(parameterObject.getClass())) {
                        String value = parameterObject.toString();
                        if (parameterObject instanceof Date) {
                            value = "'" + date2String((Date) parameterObject) + "'";
                        }else if (parameterObject instanceof String){
                            value = "'" + parameterObject + "'";
                        }
                        sql = sql.replaceFirst("\\?", value);
                    } else{
                        Object obj = metaObject.getValue(parameterMapping.getProperty());
                        if (Objects.nonNull(obj)) {
                            String value = obj.toString();
                            if (obj instanceof Date) {
                                value = "'" + date2String((Date) obj) + "'";
                            }else if (obj instanceof String){
                                value = "'" + obj + "'";
                            }
                            sql = sql.replaceFirst("\\?",value);
                        }else {
                            sql = sql.replaceFirst("\\?","null");
                        }
                    }
                }
            }
            // 未解决分页显示日志
            log.info("execute sql:" + sql.replaceAll(" {2}"," "));
        } catch (Exception e) {
            log.error("mybatis sql日志报错: {}, 错误是: {}", sql, e.getMessage());
        }
        return re;
    }

    private String date2String(Date date){
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        return sdf.format(date);
    }
}
